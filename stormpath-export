#!/usr/bin/env python
"""
stormpath-export
~~~~~~~~~~~~~~~~

Easily export your Stormpath (https://stormpath.com/) user data.

Usage:
  stormpath-export configure
  stormpath-export [(<location> | -l <location> | --location <location>)]
  stormpath-export [(<stormpath_api_key_id> <stormpath_api_key_secret>) [(<stormpath_base_url>)]]
  stormpath-export (-h | --help)
  stormpath-export --version

Options:
  -h --help  Show this screen.
  --version  Show version.

Written by Randall Degges <http://www.rdegges.com/>.
"""

from builtins import input
from json import dumps, loads
from os import chmod, getcwd, makedirs
from os.path import dirname, exists, expanduser
from sys import exit

from docopt import docopt
from stormpath.client import Client
from stormpath.error import Error


##### GLOBALS
CONFIG_FILE = expanduser('~/.stormy')
VERSION = 'stormpath-export 0.1.2'


class StormpathExport(object):
    """Our CLI manager."""

    EXPORTS = ['tenants', 'applications', 'directories', 'groups', 'organizations', 'accounts']

    def __init__(self, stormpath_api_key_id=None, stormpath_api_key_secret=None, stormpath_base_url=None):
        """Initialize our Stormpath client, or die tryin' >:)"""
        if exists(CONFIG_FILE):
            credentials = loads(open(CONFIG_FILE, 'r').read())
            self.client = Client(api_key={
                'id': credentials.get('stormpath_api_key_id'),
                'secret': credentials.get('stormpath_api_key_secret'),
            }, base_url=credentials.get('stormpath_base_url') or None)
        elif stormpath_api_key_id and stormpath_api_key_secret:
            self.client = Client(api_key={
                'id': stormpath_api_key_id,
                'secret': stormpath_api_key_secret,
            }, base_url=stormpath_base_url or None)
        else:
            print('No API credentials found! Please run stormpath-export configure to set them up.')
            exit(1)

    def get_custom_data(self, resource):
        """
        Given a Stormpath resource, we'll extract the custom data in a JSON
        compatible format.

        Since all Stormpath resources contain custom data with two properties:
        `created_at` and `modified_at`, we'll simply convert these timestamp
        fields into ISO 8601 strings.

        :param obj resource: The Stormpath resource object.  Account,
            Application, Directory, etc.
        """
        try:
            custom_data = dict(resource.custom_data)
        except AttributeError:
            custom_data = dict(resource['custom_data'])

        custom_data['createdAt'] = custom_data['created_at'].isoformat()
        custom_data['modifiedAt'] = custom_data['modified_at'].isoformat()

        del custom_data['created_at']
        del custom_data['modified_at']

        return custom_data

    def get_id(self, resource):
        """
        Given a Stormpath Resource, we'll extract the resource ID.

        :param obj resource: The Stormpath resource object.  Account,
            Application, Directory, etc.
        """
        try:
            return resource.href.split('/')[-1]
        except AttributeError:
            return resource['href'].split('/')[-1]

    def set_location(self, location):
        """
        Return the proper location used to export our JSON data.

        :param str location: The location to backup all Stormpath data (must be
            a folder).
        """
        if not location:
            location = getcwd() + '/stormpath-exports'

        return location

    def write(self, file, data):
        """
        Write JSON data to the specified file.

        This is a simple wrapper around our file handling stuff.

        :param str file: The file to write.
        :param dict data: The data to write to the file, as a JSON dict.
        """
        if not exists(dirname(file)):
            makedirs(dirname(file))

        with open(file + '.json', 'w') as file:
            file.write(dumps(data, indent=2, separators=(',', ': '), sort_keys=True))

    def export_tenants(self):
        """Export all tenant data for this Stormpath account."""
        print('\n=== Exporting all tenant data...')

        tenant = dict(self.client.tenant)

        print('- Exporting tenant:', tenant['name'])

        json = {
            'id': self.get_id(tenant),
            'href': tenant['href'],
            'name': tenant['name'],
            'key': tenant['key'],
            'createdAt': tenant['created_at'].isoformat(),
            'modifiedAt': tenant['modified_at'].isoformat(),
            'customData': self.get_custom_data(tenant),
        }

        #for application in tenant.applications:

        self.write('%s/%s/meta' % (self.location, json['id']), json)

        print('=== Done!\n')

    def export_applications(self):
        """Export all application data for this Stormpath account."""
        print('\n=== Exporting all application data...')

        for application in self.client.applications:
            print('- Exporting application:', application.name)

            json = {
                'id': self.get_id(application),
                'href': application.href,
                'name': application.name,
                'description': application.description,
                'status': application.status,
                'createdAt': application.created_at.isoformat(),
                'modifiedAt': application.modified_at.isoformat(),
                'customData': self.get_custom_data(application),
                'default_account_store_mapping': None,
                'default_group_store_mapping': None,
                'account_store_mappings': [],
                #'verificationEmails': [],
            }

            default_account_store_mapping = application.default_account_store_mapping
            default_group_store_mapping = application.default_group_store_mapping

            if default_account_store_mapping:
                json['default_account_store_mapping'] = {
                    'id': application.default_account_store_mapping.href.split('/')[-1],
                    'href': application.default_account_store_mapping.href,
                    'type': application.default_account_store_mapping.account_store.__class__.__name__,
                    'name': application.default_account_store_mapping.account_store.name,
                    'list_index': application.default_account_store_mapping.list_index,
                }

            if default_group_store_mapping:
                json['default_group_store_mapping'] = {
                    'id': application.default_group_store_mapping.href.split('/')[-1],
                    'href': application.default_group_store_mapping.href,
                    'type': application.default_group_store_mapping.account_store.__class__.__name__,
                    'name': application.default_group_store_mapping.account_store.name,
                    'list_index': application.default_group_store_mapping.list_index,
                }

            for account_store_mapping in application.account_store_mappings:
                json['account_store_mappings'].append({
                    'id': self.get_id(account_store_mapping),
                    'href': account_store_mapping.href,
                    'account_store': {
                        'type': account_store_mapping.account_store.__class__.__name__,
                        'id': self.get_id(account_store_mapping.account_store),
                        'href': account_store_mapping.account_store.href,
                        'name': account_store_mapping.account_store.name,
                        'description': account_store_mapping.account_store.description,
                        'status': account_store_mapping.account_store.status,
                    },
                    'list_index': account_store_mapping.list_index,
                    'is_default_account_store': account_store_mapping.is_default_account_store,
                    'is_default_group_store': account_store_mapping.is_default_group_store,
                })

            tenant = self.get_id(application.tenant)
            self.write('%s/%s/applications/%s' % (self.location, tenant, json['id']), json)

        print('=== Done!\n')

    def export_directories(self):
        """Export all directory data for this Stormpath account."""
        print('=== Exporting all directory data...')

        for directory in self.client.directories:
            print('- Exporting directory:', directory.name)

            json = {
                'id': self.get_id(directory),
                'href': directory.href,
                'name': directory.name,
                'description': directory.description,
                'status': directory.status,
                'createdAt': directory.created_at.isoformat(),
                'modifiedAt': directory.modified_at.isoformat(),
                'customData': self.get_custom_data(directory),
                'groups': [],
            }

            for group in directory.groups:
                json['groups'].append({
                    'id': self.get_id(group),
                    'href': group.href,
                    'name': group.name,
                    'description': group.description,
                    'status': group.status,
                    'createdAt': group.created_at.isoformat(),
                    'modifiedAt': group.modified_at.isoformat(),
                })

            json['provider'] = {
                'href': directory.provider.href,
                'providerId': directory.provider.provider_id,
                'agent': None,
            }

            try:
                json['provider']['createdAt'] = directory.provider.created_at.isoformat()
                json['provider']['modifiedAt'] = directory.provider.modified_at.isoformat()
            except AttributeError:
                json['provider']['createdAt'] = None
                json['provider']['modifiedAt'] = None

            try:
                json['provider']['clientId'] = directory.provider.client_id
            except AttributeError:
                json['provider']['clientId'] = None

            try:
                json['provider']['clientSecret'] = directory.provider.client_secret
            except AttributeError:
                json['provider']['clientSecret'] = None

            try:
                json['provider']['redirectUri'] = directory.provider.redirect_uri
            except AttributeError:
                json['provider']['redirectUri'] = None

            try:
                json['provider']['agent'] = {
                    'id': self.get_id(directory.provider.agent),
                    'href': directory.provider.agent.href,
                    'status': directory.provider.agent.status,
                    'createdAt': directory.provider.agent.created_at.isoformat(),
                    'modifiedAt': directory.provider.agent.modified_at.isoformat(),
                    'config': {
                        'directoryHost': directory.provider.agent.directory_host,
                        'directoryPort': directory.provider.agent.directory_port,
                        'sslRequired': directory.provider.agent.ssl_required,
                        'agentUserDn': directory.provider.agent.agent_user_dn,
                        'agentUserDnPassword': directory.provider.agent.agent_user_dn_password,
                        'baseDn': directory.provider.agent.base_dn,
                        'pollInterval': directory.provider.agent.poll_interval,
                        'referralMode': directory.provider.agent.referral_mode,
                        'ignoreReferralIssues': directory.provider.agent.ignore_referral_issues,
                        'accountConfig': directory.provider.agent.account_config,
                        'groupConfig': directory.provider.agent.group_config,
                    },
                    'download': {

                    },
                }
            except AttributeError:
                pass

            if directory.password_policy:
                json['passwordPolicy'] = {
                    'id': self.get_id(directory.password_policy),
                    'href': directory.password_policy.href,
                    #'createdAt': directory.password_policy.created_at.isoformat(),
                    #'modifiedAt': directory.password_policy.modified_at.isoformat(),
                    'resetEmailStatus': directory.password_policy.reset_email_status,
                    'resetEmailTemplates': [],
                    'resetSuccessEmailStatus': directory.password_policy.reset_success_email_status,
                    'resetSuccessEmailTemplates': [],
                    'resetTokenTtl': directory.password_policy.reset_token_ttl,
                    'strength': {
                        'href': directory.password_policy.strength.href,
                        #'createdAt': directory.password_policy.strength.created_at.isoformat(),
                        #'modifiedAt': directory.password_policy.strength.modified_at.isoformat(),
                        'maxLength': directory.password_policy.strength.max_length,
                        'minDiacritic': directory.password_policy.strength.min_diacritic,
                        'minLength': directory.password_policy.strength.min_length,
                        'minLowerCase': directory.password_policy.strength.min_lower_case,
                        'minNumeric': directory.password_policy.strength.min_numeric,
                        'minSymbol': directory.password_policy.strength.min_symbol,
                        'minUpperCase': directory.password_policy.strength.min_upper_case,
                    },
                }

            try:
                for template in directory.password_policy.reset_email_templates:
                    json['passwordPolicy']['resetEmailTemplates'].append({
                        'id': self.get_id(template),
                        'href': template.href,
                        'createdAt': template.created_at.isoformat(),
                        'modifiedAt': template.modified_at.isoformat(),
                        'fromName': template.from_name,
                        'name': template.name,
                        'description': template.description,
                        'fromEmailAddress': template.from_email_address,
                        'textBody': template.text_body,
                        'htmlBody': template.html_body,
                        'defaultModel': template.default_model,
                        'mimeType': template.mime_type,
                        'subject': template.subject,
                    })
            except AttributeError:
                pass

            try:
                for template in directory.password_policy.reset_success_email_templates:
                    json['passwordPolicy']['resetSuccessEmailTemplates'].append({
                        'id': self.get_id(template),
                        'href': template.href,
                        'createdAt': template.created_at.isoformat(),
                        'modifiedAt': template.modified_at.isoformat(),
                        'fromName': template.from_name,
                        'name': template.name,
                        'description': template.description,
                        'fromEmailAddress': template.from_email_address,
                        'textBody': template.text_body,
                        'htmlBody': template.html_body,
                        'mimeType': template.mime_type,
                        'subject': template.subject,
                    })
            except AttributeError:
                pass

            tenant = self.get_id(directory.tenant)
            self.write('%s/%s/directories/%s' % (self.location, tenant, json['id']), json)

        print('=== Done!\n')

    def export_organizations(self):
        """Export all organization data for this Stormpath account."""
        print('\n=== Exporting all organization data...')

        for organization in self.client.organizations:
            print('- Exporting organizations:', organization.name)

            json = {
                'id': self.get_id(organization),
                'href': organization.href,
                'name': organization.name,
                'nameKey': organization.name_key,
                'description': organization.description,
                'status': organization.status,
                'createdAt': organization.created_at.isoformat(),
                'modifiedAt': organization.modified_at.isoformat(),
                'customData': self.get_custom_data(organization),
                'default_account_store_mapping': None,
                'default_group_store_mapping': None,
                'account_store_mappings': [],
            }

            default_account_store_mapping = organization.default_account_store_mapping
            default_group_store_mapping = organization.default_group_store_mapping

            if default_account_store_mapping:
                json['default_account_store_mapping'] = {
                    'id': organization.default_account_store_mapping.href.split('/')[-1],
                    'href': organization.default_account_store_mapping.href,
                    'type': organization.default_account_store_mapping.account_store.__class__.__name__,
                    'name': organization.default_account_store_mapping.account_store.name,
                    'list_index': organization.default_account_store_mapping.list_index,
                }

            if default_group_store_mapping:
                json['default_group_store_mapping'] = {
                    'id': organization.default_group_store_mapping.href.split('/')[-1],
                    'href': organization.default_group_store_mapping.href,
                    'type': organization.default_group_store_mapping.account_store.__class__.__name__,
                    'name': organization.default_group_store_mapping.account_store.name,
                    'list_index': organization.default_group_store_mapping.list_index,
                }

            for account_store_mapping in organization.account_store_mappings:
                json['account_store_mappings'].append({
                    'id': self.get_id(account_store_mapping),
                    'href': account_store_mapping.href,
                    'account_store': {
                        'type': account_store_mapping.account_store.__class__.__name__,
                        'id': self.get_id(account_store_mapping.account_store),
                        'href': account_store_mapping.account_store.href,
                        'name': account_store_mapping.account_store.name,
                        'description': account_store_mapping.account_store.description,
                        'status': account_store_mapping.account_store.status,
                    },
                    'list_index': account_store_mapping.list_index,
                    'is_default_account_store': account_store_mapping.is_default_account_store,
                    'is_default_group_store': account_store_mapping.is_default_group_store,
                })

            tenant = self.get_id(organization.tenant)
            self.write('%s/%s/organizations/%s' % (self.location, tenant, json['id']), json)

        print('=== Done!\n')

    def export_groups(self):
        """Export all group data for this Stormpath account."""
        print('=== Exporting all group data...')

        for group in self.client.tenant.groups:
            print('- Exporting group:', group.name)

            json = {
                'id': self.get_id(group),
                'href': group.href,
                'name': group.name,
                'description': group.description,
                'status': group.status,
                'createdAt': group.created_at.isoformat(),
                'modifiedAt': group.modified_at.isoformat(),
                'customData': self.get_custom_data(group),
                'directory': {
                    'id': self.get_id(group.directory),
                    'href': group.directory.href,
                    'name': group.directory.name,
                    'description': group.directory.description,
                    'status': group.directory.status,
                    'createdAt': group.directory.created_at.isoformat(),
                    'modifiedAt': group.directory.modified_at.isoformat(),
                },
                'accounts': [],
            }

            for account in group.accounts:
                json['accounts'].append({
                    'id': self.get_id(account),
                    'href': account.href,
                    'username': account.username,
                    'email': account.email,
                    'fullName': account.full_name,
                    'givenName': account.given_name,
                    'middleName': account.middle_name,
                    'surname': account.surname,
                    'status': account.status,
                    'createdAt': account.created_at.isoformat(),
                    'modifiedAt': account.modified_at.isoformat(),
                })

            tenant = self.get_id(self.client.tenant)
            self.write('%s/%s/groups/%s' % (self.location, tenant, json['id']), json)

        print('=== Done!\n')

    def export_accounts(self):
        """Export all account data for this Stormpath account."""
        print('=== Exporting all account data...')

        for account in self.client.tenant.accounts:
            print('- Exporting account:', account.email)

            json = {
                'id': self.get_id(account),
                'href': account.href,
                'username': account.username,
                'email': account.email,
                'fullName': account.full_name,
                'givenName': account.given_name,
                'middleName': account.middle_name,
                'surname': account.surname,
                'status': account.status,
                'createdAt': account.created_at.isoformat(),
                'modifiedAt': account.modified_at.isoformat(),
                'customData': self.get_custom_data(account),
                'groups': [],
                'apiKeys': [],
                'directory': {
                    'id': self.get_id(account.directory),
                    'href': account.directory.href,
                    'name': account.directory.name,
                    'description': account.directory.description,
                    'status': account.directory.status,
                    'createdAt': account.directory.created_at.isoformat(),
                    'modifiedAt': account.directory.modified_at.isoformat(),
                },
            }

            for api_key in account.api_keys:
                json['apiKeys'].append({
                    'href': api_key.href,
                    'id': api_key.id,
                    'secret': api_key.secret,
                    #'createdAt': api_key.created_at.isoformat(),
                    #'modifiedAt': api_key.modified_at.isoformat(),
                })

            for group in account.groups:
                json['groups'].append({
                    'id': self.get_id(group),
                    'href': group.href,
                    'name': group.name,
                    'description': group.description,
                    'status': group.status,
                    'createdAt': group.created_at.isoformat(),
                    'modifiedAt': group.modified_at.isoformat(),
                })

            tenant = self.get_id(self.client.tenant)
            self.write('%s/%s/accounts/%s' % (self.location, tenant, json['id']), json)

        print('=== Done!\n')

    def export(self, location=None):
        """
        Export all Stormpath data to the disk, in JSON format.

        Takes an optional argument (the directory to export all data to).

        :param str location: The location to backup all Stormpath data (must be
            a folder).
        """
        self.location = self.set_location(location)

        # Export all Stormpath data.
        for export_type in self.EXPORTS:
            getattr(self, 'export_' + export_type)()


def configure():
    """
    Initializing stormpath-export.

    This will store the user's API credentials in: ~/.stormy, and ensure the
    API credentials specified actually work.
    """
    print('Initializing `stormpath-export`...\n')
    print("To get started, we'll need to get your Stormpath API credentials.  Don't have a Stormpath account? Go get one! https://stormpath.com")

    finished = False
    while not finished:
        api_key_id = input('Enter your API Key ID: ').strip()
        api_key_secret = input('Enter your API Key Secret: ').strip()
        base_url = input('Enter your Base URL (optional): ').strip()
        if not (api_key_id or api_key_secret):
            print('\nNot sure how to find your Stormpath API credentials?')
            print('Log into your Stormpath account, then visit your dashboard and use the "Manage Existing Keys" link.\n')
            continue

        # Validate the API credentials.
        client = Client(api_key={
            'id': api_key_id,
            'secret': api_key_secret,
        }, base_url=base_url or None)
        try:
            client.applications
            print('\nSuccessfully initialized stormy!')
            print('Your API credentials are stored in the file:', CONFIG_FILE, '\n')
            print('Run stormpath-export for usage information.')

            with open(CONFIG_FILE, 'w') as stormycfg:
                stormycfg.write(dumps({
                    'stormpath_api_key_id': api_key_id,
                    'stormpath_api_key_secret': api_key_secret,
                    'stormpath_base_url': base_url or None
                }, indent=2, sort_keys=True))

            # Make the stormy configuration file only accessible to the current
            # user -- this makes the credentials a bit more safe.
            chmod(CONFIG_FILE, 0o600)

            finished = True
        except Error:
            print('\nYour API credentials are not working, please verify they are correct, then try again.\n')


def main():
    """Handle user input, and do stuff accordingly."""
    arguments = docopt(__doc__, version=VERSION)

    # Handle the configure as a special case -- this way we won't get invalid
    # API credential messages when we're trying to configure stormpath-export.
    if arguments['configure']:
        configure()
        return

    exporter = StormpathExport(arguments['<stormpath_api_key_id>'],arguments['<stormpath_api_key_secret>'],arguments['<stormpath_base_url>'])
    exporter.export(arguments['<location>'])


if __name__ == '__main__':
    main()
